generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId         String   @unique
  email           String   @unique
  name            String?
  phone           String?
  imageUrl        String?
  profileImageUrl String?
  gender          String?
  role            UserRole @default(USER)
  addresses       Address[]
  orders          Order[]
  cart            Cart?
  wishlist        Wishlist?
  reviews         Review[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("users")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?   @db.ObjectId
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String   @unique
  description   String
  details       String?
  price         Float
  comparePrice  Float?
  costPrice     Float?
  categoryId    String   @db.ObjectId
  category      Category @relation(fields: [categoryId], references: [id])
  brand         String?
  tags          String[]
  colors        Color[]
  sizes         Size[]
  images        Image[]
  variants      Variant[]
  stock         Int      @default(0)
  lowStockAlert Int      @default(10)
  weight        Float?
  dimensions    Dimension?
  material      String?
  careInstructions String?
  occasion      String[]
  pattern       String?
  fabric        String?
  workType      String?
  blouseIncluded Boolean @default(false)
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([categoryId])
  @@map("products")
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  hexCode   String
  productId String    @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants  Variant[]

  @@map("colors")
}

model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  productId String    @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants  Variant[]

  @@map("sizes")
}

model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  alt       String?
  isPrimary Boolean @default(false)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("images")
}

model Variant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorId   String? @db.ObjectId
  color     Color?  @relation(fields: [colorId], references: [id])
  sizeId    String? @db.ObjectId
  size      Size?   @relation(fields: [sizeId], references: [id])
  sku       String  @unique
  price     Float?
  stock     Int     @default(0)
  image     String?

  @@map("variants")
}

model Dimension {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  length    Float
  width     Float
  height    Float
  productId String  @unique @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("dimensions")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  @@map("cart_items")
}

model Wishlist {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String         @unique @db.ObjectId
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("wishlists")
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  addedAt    DateTime @default(now())

  @@map("wishlist_items")
}

model Order {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber     String        @unique
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  paymentId       String?
  shippingAddress Address       @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String      @db.ObjectId
  billingAddress  Address?      @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId String?      @db.ObjectId
  subtotal        Float
  tax             Float
  shipping        Float
  discount        Float         @default(0)
  total           Float
  couponCode      String?
  notes           String?
  trackingNumber  String?
  estimatedDelivery DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  total     Float

  @@map("order_items")
}

model Address {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  @db.ObjectId
  user           User    @relation(fields: [userId], references: [id])
  name           String
  phone          String
  addressLine1   String
  addressLine2   String?
  city           String
  state          String
  pincode        String
  country        String  @default("India")
  isDefault      Boolean @default(false)
  orders         Order[]
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  title     String?
  comment   String?
  images    String[]
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
  @@map("reviews")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}